// 聚合
{
  "config": "{\n\t\"secretKey\":\"f7d9458d592713b8cff52a3cd9939fcb\"\n}",
  "description": "聚合短信",
  "providerName": "聚合",
  "scriptContext": "import com.alibaba.fastjson.JSONObject;\nimport com.zte.msg.pushcenter.pcscript.PcScript;\n\nimport java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLEncoder;\nimport java.util.Map;\n\n\npublic class JuheSmsDemo implements PcScript {\n    public static final String DEF_CHATSET = \"UTF-8\";\n    public static final int DEF_CONN_TIMEOUT = 30000;\n    public static final int DEF_READ_TIMEOUT = 30000;\n    public static String userAgent = \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.66 Safari/537.36\";\n\n    @Override\n    public Res execute(Map<String, Object> params) {\n        StringBuilder var = new StringBuilder();\n        Map<String, String> vars = (Map<String, String>) params.get(\"vars\");\n        vars.forEach((k, v) -> var.append(\"#\").append(k).append(\"#\").append(\"=\").append(v).append(\"&\"));\n        String url = \"http://v.juhe.cn/sms/send?\";\n        StringBuilder url1 = new StringBuilder(url);\n        String encode = var.toString();\n        try {\n            encode = URLEncoder.encode(encode, \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        url1.append(\"mobile\").append(\"=\").append(params.get(\"phoneNum\"))\n                .append(\"&\").append(\"tpl_id\").append(\"=\").append(params.get(\"code\"))\n                .append(\"&\").append(\"tpl_value\").append(\"=\").append(encode)\n                .append(\"&\").append(\"key\").append(\"=\").append(params.get(\"secretKey\"));\n        return parseResponse(net(url1.toString(), \"GET\"));\n    }\n\n    /**\n     * @param strUrl 请求地址\n     * @param method 请求方法\n     * @return 网络请求字符串\n     * @throws Exception\n     */\n    public static String net(String strUrl, String method) {\n        HttpURLConnection conn = null;\n        BufferedReader reader = null;\n        String rs = null;\n        StringBuilder sb = new StringBuilder();\n        try {\n            System.out.println(strUrl);\n            URL url = new URL(strUrl);\n            conn = (HttpURLConnection) url.openConnection();\n            conn.setRequestMethod(method);\n            conn.setRequestProperty(\"User-agent\", userAgent);\n            conn.setUseCaches(false);\n            conn.setConnectTimeout(DEF_CONN_TIMEOUT);\n            conn.setReadTimeout(DEF_READ_TIMEOUT);\n            conn.setInstanceFollowRedirects(false);\n            conn.connect();\n            InputStream is = conn.getInputStream();\n            reader = new BufferedReader(new InputStreamReader(is, DEF_CHATSET));\n            String strRead = null;\n            while ((strRead = reader.readLine()) != null) {\n                sb.append(strRead);\n            }\n            rs = sb.toString();\n            reader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (conn != null) {\n                conn.disconnect();\n            }\n        }\n        System.out.println(rs);\n        return rs;\n    }\n\n\n    private Res parseResponse(String res) {\n//        {\n//        \t\"reason\":\"操作成功\",\n//        \t\"result\":{\n//        \t\t\"sid\":\"1428ADC382FEDE59\",\n//        \t\t\"fee\":1,\n//        \t\t\"count\":1\n//        \t},\n//        \t\"error_code\":0\n//        }\n        JSONObject resObj = JSONObject.parseObject(res);\n        ErrorCodes errorCode = ErrorCodes.find(resObj.getString(\"error_code\"));\n\n        return new Res(errorCode.getPcCode(), resObj.getString(\"reason\"));\n    }\n\n    public enum ErrorCodes {\n\n        ERROR_PHONE_NUM(\"205401\", 32100001, \"错误的手机号码\"),\n\n        ERROR_TEMPLATE_ID(\"205402\", 32100002, \"错误的模版id\"),\n\n        NET_ERROR(\"205403\", 32100003, \"网络错误\"),\n\n        TEMPLATE_VAR_NOR_FORMAT(\"205404\", 32100006, \"模版变量不符合规范\"),\n\n        EXCEED_LIMIT(\"205405\", 32100004, \"号码异常/同一号码发送次数过于频繁\"),\n\n        ERROR_KEY(\"10001\", 32100005, \"错误的请求KEY\"),\n\n        PERMISSION_DEFINED_KEY(\"10002\", 32100005, \"该KEY无请求权限\"),\n\n        SUCCESS(\"0\", 0, \"成功\"),\n\n        UNKNOWN(\"-1\", -1, \"位置错误\");\n\n        private String code;\n\n        private Integer pcCode;\n\n        private String message;\n\n        ErrorCodes(String code, Integer pcCode, String message) {\n            this.code = code;\n            this.pcCode = pcCode;\n            this.message = message;\n        }\n\n        private static ErrorCodes find(String code) {\n            for (ErrorCodes errorCode : ErrorCodes.values()) {\n                if (errorCode.code.equals(code)) {\n                    return errorCode;\n                }\n            }\n            return UNKNOWN;\n        }\n\n        public String getCode() {\n            return code;\n        }\n\n        public Integer getPcCode() {\n            return pcCode;\n        }\n\n        public String getMessage() {\n            return message;\n        }\n    }\n}",
  "type": 1
}
//腾讯
{
  "config": "{\n\t\"appId\":\"1400465545\",\n\t\"secretId\":\"AKIDyid2EePjPs75ljCt6qMbWDfrtf7h9JFv\",\n\t\"secretKey\":\"INDn8zKQHuLYUDOM9dqo68tPnunQEo86\"\n}",
  "description": "腾讯短信",
  "providerName": "腾讯云",
  "scriptContext": "import com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport com.zte.msg.pushcenter.pcscript.ParamConstants;\nimport com.zte.msg.pushcenter.pcscript.PcScript;\n\nimport javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.xml.bind.DatatypeConverter;\nimport java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Map;\nimport java.util.TimeZone;\n\n/**\n * description:\n *\n * @author chentong\n * @version 1.0\n * @date 2020/12/22 10:36\n */\npublic class TencentSmsDemo implements PcScript {\n\n    public static final int DEF_CONN_TIMEOUT = 30000;\n    public static final int DEF_READ_TIMEOUT = 30000;\n    private final static Charset UTF8 = StandardCharsets.UTF_8;\n\n    private final static String CT_JSON = \"application/json\";\n    public static final String CODE = \"Code\";\n    public static final String OK = \"Ok\";\n\n    public static byte[] hmac256(byte[] key, String msg) throws Exception {\n        Mac mac = Mac.getInstance(\"HmacSHA256\");\n        SecretKeySpec secretKeySpec = new SecretKeySpec(key, mac.getAlgorithm());\n        mac.init(secretKeySpec);\n        return mac.doFinal(msg.getBytes(UTF8));\n    }\n\n    public static String sha256Hex(String s) throws Exception {\n        MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n        byte[] d = md.digest(s.getBytes(UTF8));\n        return DatatypeConverter.printHexBinary(d).toLowerCase();\n    }\n\n    public String net(Map<String, Object> params) {\n        String secretId = params.get(ParamConstants.SECRET_ID).toString();\n        String secretKey = params.get(ParamConstants.SECRET_KEY).toString();\n        StringBuilder res = new StringBuilder();\n        try {\n            String service = \"sms\";\n            String host = \"sms.tencentcloudapi.com\";\n//        String region = \"ap-guangzhou\";\n            String action = \"SendSms\";\n            String version = \"2019-07-11\";\n            String algorithm = \"TC3-HMAC-SHA256\";\n            String timestamp = String.valueOf(System.currentTimeMillis() / 1000);\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n            // 注意时区，否则容易出错\n            sdf.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n            String date = sdf.format(new Date(Long.parseLong(timestamp + \"000\")));\n            // ************* 步骤 1：拼接规范请求串 *************\n            String httpRequestMethod = \"POST\";\n            String canonicalUri = \"/\";\n            String canonicalQueryString = \"\";\n            String canonicalHeaders = \"content-type:application/json\\n\" + \"host:\" + host + \"\\n\";\n            String signedHeaders = \"content-type;host\";\n\n            String payload = buildPayload(params);\n            String hashedRequestPayload = sha256Hex(payload);\n            String canonicalRequest = httpRequestMethod + \"\\n\" + canonicalUri + \"\\n\" + canonicalQueryString + \"\\n\"\n                    + canonicalHeaders + \"\\n\" + signedHeaders + \"\\n\" + hashedRequestPayload;\n            // ************* 步骤 2：拼接待签名字符串 *************\n            String credentialScope = date + \"/\" + service + \"/\" + \"tc3_request\";\n            String hashedCanonicalRequest = sha256Hex(canonicalRequest);\n            String stringToSign = algorithm + \"\\n\" + timestamp + \"\\n\" + credentialScope + \"\\n\" + hashedCanonicalRequest;\n            // ************* 步骤 3：计算签名 *************\n            byte[] secretDate = hmac256((\"TC3\" + secretKey).getBytes(UTF8), date);\n            byte[] secretService = hmac256(secretDate, service);\n            byte[] secretSigning = hmac256(secretService, \"tc3_request\");\n            String signature = DatatypeConverter.printHexBinary(hmac256(secretSigning, stringToSign)).toLowerCase();\n            // ************* 步骤 4：拼接 Authorization *************\n            String authorization = algorithm + \" \" + \"Credential=\" + secretId + \"/\" + credentialScope + \", \"\n                    + \"SignedHeaders=\" + signedHeaders + \", \" + \"Signature=\" + signature;\n            HttpURLConnection conn = null;\n            BufferedReader reader;\n//            StringBuilder sb = new StringBuilder();\n//            sb.append(\"curl -X POST https://\").append(host)\n//                    .append(\" -H \\\"Authorization: \").append(authorization).append(\"\\\"\")\n//                    .append(\" -H \\\"Content-Type: application/json\\\"\")\n//                    .append(\" -H \\\"Host: \").append(host).append(\"\\\"\")\n//                    .append(\" -H \\\"X-TC-Action: \").append(action).append(\"\\\"\")\n//                    .append(\" -H \\\"X-TC-Timestamp: \").append(timestamp).append(\"\\\"\")\n//                    .append(\" -H \\\"X-TC-Version: \").append(version).append(\"\\\"\")\n//                    .append(\" -H \\\"X-TC-Language: \").append(\"zh-CN\").append(\"\\\"\")\n//                    .append(\" -d '\").append(payload).append(\"'\");\n//            curl = sb.toString();\n            try {\n                URL url = new URL(\"https://\" + host);\n                conn = (HttpURLConnection) url.openConnection();\n                conn.setRequestMethod(\"POST\");\n                conn.setUseCaches(false);\n                conn.setDoOutput(true);\n                conn.setDoInput(true);\n                conn.setConnectTimeout(DEF_CONN_TIMEOUT);\n                conn.setReadTimeout(DEF_READ_TIMEOUT);\n                conn.setInstanceFollowRedirects(false);\n                conn.setRequestProperty(\"Authorization\", authorization);\n                conn.setRequestProperty(\"Content-Type\", CT_JSON);\n                conn.setRequestProperty(\"Host\", host);\n                conn.setRequestProperty(\"X-TC-Action\", action);\n                conn.setRequestProperty(\"X-TC-Timestamp\", timestamp);\n                conn.setRequestProperty(\"X-TC-Version\", version);\n                conn.setRequestProperty(\"X-TC-Language\", \"zh-CN\");\n                conn.connect();\n\n                OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream(), \"UTF-8\");\n                writer.write(payload);\n                writer.flush();\n\n                InputStream is = conn.getInputStream();\n                reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));\n                String strRead;\n                while ((strRead = reader.readLine()) != null) {\n                    res.append(strRead);\n                }\n                reader.close();\n                writer.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                if (conn != null) {\n                    conn.disconnect();\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return res.toString();\n    }\n\n    private String buildPayload(Map<String, Object> params) {\n\n        Map<String, String> vars = (Map<String, String>) params.get(ParamConstants.VARS);\n        return \"{\\\"PhoneNumberSet\\\":[\\\"+86\" +\n                params.get(ParamConstants.PHONE_NUM).toString() +\n                \"\\\"],\\\"TemplateParamSet\\\":\" +\n                JSON.toJSONString(vars.values()) +\n                \",\\\"TemplateID\\\":\\\"\" +\n                params.get(ParamConstants.TEMPLATE_ID).toString() +\n                \"\\\",\\\"SmsSdkAppid\\\":\\\"\" +\n                params.get(ParamConstants.APP_ID).toString() +\n                \"\\\",\\\"Sign\\\":\\\"\" +\n                params.get(ParamConstants.SIGN).toString() +\n                \"\\\"}\";\n    }\n\n\n    @Override\n    public Res execute(Map<String, Object> params) {\n        String res = net(params);\n        System.out.println(res);\n        if (res == null || \"\".equals(res)) {\n            return new Res(-1, \"未知错误\");\n        }\n\n        Map<String, Object> innerMap = JSONObject.parseObject(res).getInnerMap();\n\n        JSONObject error = (JSONObject) innerMap.get(\"Error\");\n        if (null != error) {\n            String code = error.getString(CODE);\n            ErrorCodes errorCodes = ErrorCodes.find(code);\n            return new Res(errorCodes.pcCode, errorCodes.message);\n        }\n\n        JSONObject response = (JSONObject) innerMap.get(\"Response\");\n\n        JSONArray sendStatusSet = (JSONArray) response.get(\"SendStatusSet\");\n        JSONObject sendStatus = (JSONObject) sendStatusSet.get(0);\n        if (!sendStatus.get(CODE).toString().equals(OK)) {\n            String code = sendStatus.get(CODE).toString();\n            ErrorCodes errorCodes = ErrorCodes.find(code);\n            return new Res(errorCodes.pcCode, errorCodes.message);\n        }\n        return new Res(0, \"success\");\n    }\n\n    public enum ErrorCodes {\n\n        ERROR_PHONE_NUM(\"InvalidParameterValue.IncorrectPhoneNumber\", 32100001, \"手机号格式错误\"),\n\n        ERROR_TEMPLATE_ID(\"FailedOperation.TemplateIncorrectOrUnapproved\", 32100002, \"模版未审批或请求的内容与审核通过的模版内容不匹配\"),\n\n        NET_ERROR(\"InternalError.SendAndRecvFail\", 32100003, \"接口超时或后短信收发包超时，请检查您的网络是否有波动\"),\n\n        TEMPLATE_VAR_NOR_FORMAT(\"InvalidParameterValue.TemplateParameterFormatError\", 32100006, \"验证码模板参数格式错误，验证码类模版，模版变量只能传入0 - 6位（包括6位）纯数字\"),\n\n        EXCEED_LIMIT(\"LimitExceeded.PhoneNumberThirtySecondLimit\", 32100004, \"单个手机号30秒内下发短信条数超过设定的上限，可自行到控制台调整短信频率限制策略。\"),\n\n        ERROR_KEY(\"AuthFailure.SignatureFailure\", 32100005, \"签名错误。 签名计算错误，请对照调用方式中的签名方法文档检查签名计算过程。\"),\n\n        SUCCESS(\"0\", 0, \"成功\"),\n\n        UNKNOWN(\"-1\", -1, \"未知错误\");\n\n        private String code;\n\n        private Integer pcCode;\n\n        private String message;\n\n        ErrorCodes(String code, Integer pcCode, String message) {\n            this.code = code;\n            this.pcCode = pcCode;\n            this.message = message;\n        }\n\n        private static ErrorCodes find(String code) {\n            for (ErrorCodes errorCode : ErrorCodes.values()) {\n                if (errorCode.code.equals(code)) {\n                    return errorCode;\n                }\n            }\n            return UNKNOWN;\n        }\n\n        public String getCode() {\n            return code;\n        }\n\n        public Integer getPcCode() {\n            return pcCode;\n        }\n\n        public String getMessage() {\n            return message;\n        }\n    }\n\n}",
  "type": 1
}

//  网易邮箱
{
  "config": "{\n  \"host\":\"smtp.163.com\",\n  \"port\":\"465\",\n  \"protocol\":\"smtps\",\n  \"username\":\"aChen1874@163.com\",\n  \"password\":\"WNEGYCVVCBERKBYB\"\n}",
  "description": "网易邮箱-ct",
  "providerName": "网易",
  "scriptContext": "",
  "type": 2
}

// 微信
{
  "config": "{\n    \"appId\": \"wx407c4efe6666887b\",\n    \"appSecret\": \"909e77c55ff246b5a4122830dffaf887\"\n}",
  "description": "中兴温州轨道通讯-微信公众号",
  "providerName": "中兴温州轨道通讯",
  "scriptContext": "",
  "type": 4
}


{
  "content": "{{first.DATA}}\n告警类型：{{keyword1.DATA}}\n告警来源：{{keyword2.DATA}}\n告警级别：{{keyword3.DATA}}\n发生时间：{{keyword4.DATA}}\n清除时间：{{keyword5.DATA}}\n{{remark.DATA}}",
  "providerId": 12,
  "providerName": "中兴温州轨道通讯",
  "status": 1,
  "title": "监测告警通知",
  "weChatTemplateId": "HOZEuJ3r90OFRHneXa5IrQTQ1eAnIXXqMnHd6S3idZ8"
}


// 推送微信消息
{
  "appId": 1,
  "appletData": "string",
  "callBackUrl": "string",
  "isCallBack": false,
  "data": "{\n    \"first\": {\n      \"value\": \"测试\",\n      \"color\": \"#173177\"\n    },\n    \"keyword1\": {\n      \"value\": \"预警\",\n      \"color\": \"#173177\"\n    },\n    \"keyword2\": {\n      \"value\": \"测试\",\n      \"color\": \"#173177\"\n    },\n    \"keyword3\": {\n      \"value\": \"测试\",\n      \"color\": \"#173177\"\n    },\n    \"keyword4\": {\n      \"value\": \"测试\",\n      \"color\": \"#173177\"\n    },\n    \"keyword5\": {\n      \"value\": \"06月07日19时24分\",\n      \"color\": \"#173177\"\n    }\n  }",
  "messageId": "sssssssssssss",
  "openId": "ozZ6k5mWals6PZy8VCYlrstPP2Ck",
  "providerId": 12,
  "templateId": 5
}

//添加极光app推送provider
{
  "appKey": "a4920eb0ef6f4718458cb7df",
  "masterSecret": "8568d82a168c65c9ae61bfb5 "
}

// 添加极光app推送
{
  "config": "{\n  \"appKey\": \"a4920eb0ef6f4718458cb7df\",\n  \"masterSecret\": \"8568d82a168c65c9ae61bfb5\"\n}",
  "description": "极光app推送-app名称：dwadwa",
  "providerName": "极光-压测",
  "scriptContext": "import com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport com.arronlong.httpclientutil.HttpClientUtil;\nimport com.arronlong.httpclientutil.builder.HCB;\nimport com.arronlong.httpclientutil.common.HttpConfig;\nimport com.arronlong.httpclientutil.common.HttpHeader;\nimport com.zte.msg.pushcenter.pcscript.PcScript;\nimport org.apache.http.Header;\nimport org.apache.http.impl.client.CloseableHttpClient;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n/**\n * description:\n *\n * @author chentong\n * @version 1.0\n * @date 2021/1/18 12:40\n */\npublic class JiGuangAppPush implements PcScript {\n\n    private static final String URL = \"https://api.jpush.cn/v3/push\";\n\n    public String getAuthorization(Map<String, Object> params) {\n        String appKey = params.get(\"appKey\").toString();\n        String masterSecret = params.get(\"masterSecret\").toString();\n        return \"Basic \" + Base64.getUrlEncoder().encodeToString((appKey + \":\" + masterSecret).getBytes());\n    }\n\n    public String convertAppPushParam(Map<String, Object> params) {\n        String pushParamJsonStr = convert(params);\n        System.out.println(\"JiGuang pushing:  \" + pushParamJsonStr);\n        return pushParamJsonStr;\n    }\n\n    private String post(String authorization, String pushParmJsonStr) {\n        String returnJson = null;\n        Header[] headers = HttpHeader.custom()\n                .other(\"Authorization\", authorization.trim())\n                .build();\n        try {\n            CloseableHttpClient client = HCB.custom().build();\n            HttpConfig config = HttpConfig.custom()\n                    .headers(headers)\n                    .url(URL)\n                    .json(pushParmJsonStr)\n                    .encoding(\"utf-8\")\n                    .client(client)\n                    .inenc(\"utf-8\")\n                    .inenc(\"utf-8\");\n            returnJson = HttpClientUtil.post(config);\n            client.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        return returnJson;\n    }\n\n    @Override\n    public Res execute(Map<String, Object> params) {\n        String res = post(getAuthorization(params), convertAppPushParam(params));\n        System.out.println(res);\n\n        JSONObject resObj = JSONObject.parseObject(res);\n        JSONObject error = resObj.getObject(\"error\", JSONObject.class);\n\n        if (Objects.nonNull(error)) {\n            String code = error.getString(\"code\");\n            ErrorCodes errorCode = ErrorCodes.find(code);\n            System.out.println(\"app push error code: \" + code);\n            return new Res(errorCode.getPcCode(), errorCode.getMessage());\n        }\n        return new Res(0, \"成功\");\n    }\n\n    public enum ErrorCodes {\n\n        ERROR_PARAM(\"1002\", 32100001, \"缺少了必须的参数\"),\n\n        ERROR_PARAM_1(\"1003\", 32100002, \"参数值不合法\"),\n\n        AUTH_FAIL(\"1004\", 32100003, \"验证失败\"),\n\n        DATA_TOO_LARGE(\"1005\", 32100006, \"消息体太大\"),\n\n        ERROR_APP_KEY(\"1008\", 32100004, \"app_key 参数非法\"),\n\n        NOT_SUPPORT_KEY(\"1009\", 32100005, \"推送对象中有不支持的 key\"),\n\n        SUCCESS(\"0\", 0, \"成功\"),\n\n        UNKNOWN(\"-1\", -1, \"未收录错误\");\n\n        private String code;\n\n        private Integer pcCode;\n\n        private String message;\n\n        ErrorCodes(String code, Integer pcCode, String message) {\n            this.code = code;\n            this.pcCode = pcCode;\n            this.message = message;\n        }\n\n        private static ErrorCodes find(String code) {\n            for (ErrorCodes errorCode : ErrorCodes.values()) {\n                if (errorCode.code.equals(code)) {\n                    return errorCode;\n                }\n            }\n            return UNKNOWN;\n        }\n\n        public String getCode() {\n            return code;\n        }\n\n        public Integer getPcCode() {\n            return pcCode;\n        }\n\n        public String getMessage() {\n            return message;\n        }\n    }\n\n    private enum Platform {\n        /**\n         * 安卓\n         */\n        ANDROID(1, \"android\"),\n\n        /**\n         * IOS\n         */\n        IOS(2, \"ios\"),\n\n        /**\n         * 所有\n         */\n        ALL(3, \"all\");\n\n        private Integer type;\n\n        private String platform;\n\n        Platform(Integer type, String platform) {\n            this.type = type;\n            this.platform = platform;\n        }\n\n        public static Platform valueOf(Integer type) {\n            for (Platform platforms : Platform.values()) {\n                if (platforms.type.equals(type)) {\n                    return platforms;\n                }\n            }\n            return null;\n        }\n\n        public Integer getType() {\n            return this.type;\n        }\n\n        public String getPlatform() {\n            return this.platform;\n        }\n    }\n\n    public enum AppMessageType {\n        /**\n         * 通知\n         */\n        NOTIFICATION(1, \"notification\"),\n\n        /**\n         * 自定义消息\n         */\n        MESSAGE(2, \"message\"),\n\n\n        UNKNOWN(-1, \"unknown\");\n\n        private Integer type;\n\n        private String messageType;\n\n        AppMessageType(Integer type, String messageType) {\n            this.type = type;\n            this.messageType = messageType;\n        }\n\n        public static AppMessageType valueOf(Integer type) {\n            for (AppMessageType messageType : AppMessageType.values()) {\n                if (messageType.type.equals(type)) {\n                    return messageType;\n                }\n            }\n            return UNKNOWN;\n        }\n\n        public Integer value() {\n            return this.type;\n        }\n    }\n\n    /**\n     * @param params\n     * @return\n     */\n    public String convert(Map<String, Object> params) {\n\n        JSONObject pushParamJson = new JSONObject();\n        List<Platform> platformList = Collections.singletonList(Platform.valueOf(Integer.parseInt(params.get(\"targetPlatform\").toString())));\n        String[] registrationIds = (String[]) params.get(\"registrationId\");\n        //构建推送平台信息\n        JSONArray platform = buildPlatform(platformList, new JSONArray());\n        //构建推送目标信息\n        JSONObject audience = buildAudience(registrationIds, new JSONObject());\n        //构建安卓的推送信息\n        JSONObject notification = new JSONObject();\n        buildAndroidInfo(notification, platformList, params);\n        buildIosInfo(notification, platformList, params);\n        //构建IOS参数信息\n        //设置推送平台信息\n        setPlatform(platform, pushParamJson);\n        //设置推送目标信息\n        setAudience(audience, pushParamJson);\n        //设置推送信息\n//        pushParamJson.put(AppMessageType.valueOf(Integer.parseInt(params.get(\"messageType\").toString())).messageType, notification);\n        pushParamJson.put(AppMessageType.NOTIFICATION.messageType, notification);\n\n        JSONObject options = new JSONObject();\n        buildOptions(options);\n        //设置options信息\n        pushParamJson.put(\"options\", options);\n        return pushParamJson.toString();\n    }\n\n    private static void setAudience(JSONObject audience, JSONObject pushParamJson) {\n        if (audience == null) {\n            pushParamJson.put(\"audience\", \"all\");//发广播\n        } else {\n            pushParamJson.put(\"audience\", audience);\n        }\n\n    }\n\n    private static void setPlatform(JSONArray platform, JSONObject pushParamJson) {\n        if (platform == null) {\n            pushParamJson.put(\"platform\", \"all\");\n        } else {\n            pushParamJson.put(\"platform\", platform);\n        }\n\n    }\n\n    private static void buildOptions(JSONObject options) {\n        options.put(\"time_to_live\", 60);\n        options.put(\"apns_production\", false);\n    }\n\n    private static void buildIosInfo(JSONObject notification,\n                                     List<Platform> platformList, Map<String, Object> appPushParam) {\n        if (Objects.isNull(platformList)) {\n            return;\n        }\n        if (platformList.contains(Platform.ALL) || platformList.contains(Platform.IOS)) {\n            JSONObject ios = new JSONObject();\n            ios.put(\"alert\", appPushParam.get(\"content\"));\n            //通知提示声音或警告通知\n            ios.put(\"sound\", \"default\");\n            //应用角标\n            ios.put(\"badge\", \"+1\");\n            //ios额外参数\n            JSONObject iosExtras = new JSONObject();\n            notification.put(\"ios\", ios);\n        }\n    }\n\n    private static void buildAndroidInfo(JSONObject notification,\n                                         List<Platform> platformList, Map<String, Object> appPushParam) {\n        if (Objects.isNull(platformList)) {\n            return;\n        }\n        if (platformList.contains(Platform.ANDROID) || platformList.contains(Platform.ALL)) {\n            JSONObject android = new JSONObject();\n            android.put(\"alert\", appPushParam.get(\"content\"));\n            android.put(\"title\", appPushParam.get(\"title\"));\n            //设置通知栏样式\n//            android.put(\"builder_id\", 1);\n            notification.put(\"android\", android);\n            System.out.println(\"android message: \" + android.toString());\n        }\n\n    }\n\n    private static JSONObject buildAudience(String[] audienceMap, JSONObject audience) {\n        if (audienceMap == null || audienceMap.length == 0) {\n            return null;\n        }\n        JSONArray audienceArray = new JSONArray();\n        audienceArray.addAll(Arrays.asList(audienceMap));\n        audience.put(\"registration_id\", audienceArray);\n        return audience;\n\n    }\n\n    /**\n     * 构建推送平台\n     *\n     * @param platformList\n     * @param platform\n     */\n    private static JSONArray buildPlatform(List<Platform> platformList, JSONArray platform) {\n        if (platformList.contains(Platform.ALL)) {\n            platform.addAll(Arrays.stream(Platform.values()).filter(o -> o != Platform.ALL).map(Platform::getPlatform).collect(Collectors.toList()));\n            return platform;\n        }\n        if (platformList.size() > 0) {\n            for (Platform platFormEnum : platformList) {\n                String platformStr = platFormEnum.toString().toLowerCase();\n                platform.add(platformStr);\n            }\n            return platform;\n        } else {\n            return null;\n        }\n    }\n\n}",
  "type": 3
}
